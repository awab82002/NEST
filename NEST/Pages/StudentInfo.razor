@page "/studentinfo/{InstId:int}"
@using ClassLibraryDAL;
@using ClassLibraryEnt;
@using System.ComponentModel
@using AntDesign.TableModels
@using AntDesign.Core.Extensions

@using Microsoft.AspNetCore.Mvc;


<a class="btn btn-primary mt-2 mb-2" href="/instituteinfo" role="button">Go Back</a>

<PageTitle>StudentInfo</PageTitle>
<a href="/AddStudentInfo/@InstId" class="btn btn-primary"> Add Student Info </a>


<div class=" table-responsive">

    <Table  TItem="EntStudentInfo" DataSource="@data">

        <PropertyColumn     Property="c=>c.Pk_studentId" Sortable />
        <PropertyColumn Property="c=>c.Name"  Filterable />
        <PropertyColumn Property="c=>c.FatherName" Filterable />
        <PropertyColumn Property="c=>c.Gender" Filterable />
        <PropertyColumn Property="c=>c.Maritial" Filterable />
        <PropertyColumn Property="c=>c.CNIC" Sortable />
        <PropertyColumn Property="c=>c.PhoneNo"  Sortable />

        <ActionColumn Title="Action">
            <Space Size=@("middle")>

                <SpaceItem>
                    <a href="/stdaccount/@context.Pk_studentId" class="btn btn-warning">View Student Account</a>
                    <a href="/stdinstallment/@context.Pk_studentId" class="btn btn-danger">View Student Installment</a>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</div>


@code {
    List<EntStudentInfo> studentlist = new List<EntStudentInfo>();
    EntStudentInfo[] data = new EntStudentInfo[] { };
    [Parameter] public int InstId { get; set; }
    protected EntStudentInfo? studentsinfo { get; set; } = new EntStudentInfo();
    DataTable dt = new DataTable();
    protected override async Task OnInitializedAsync()
    {
        studentsinfo!.Fk_InstituteId = InstId.ToString();

        SqlParameter[] sp1 =
        {
            new SqlParameter("@fk_InstituteId",studentsinfo.Fk_InstituteId),
       };
        dt = await DALCRUD.ReadDataSpecific("SP_GetStudentSpecific", sp1);
        ConvertDataIntoArray();
    }
    private void ConvertDataIntoArray()
    {
        foreach (DataRow row in dt.Rows)
        {
            EntStudentInfo entstudentInfo = new EntStudentInfo
                    {
                        Pk_studentId =row["pk_studentId"].ToString(),
                        Fk_InstituteId = row["fk_InstituteId"].ToString(),
                        
                        Name = row["Name"].ToString(),
                        FatherName = row["FatherName"].ToString(),
                        Gender = row["Gender"].ToString(),
                        Maritial = row["Maritial"].ToString(),
                        Religion = row["Religion"].ToString(),
                        CNIC = row["CNIC"].ToString(),
                        PhoneNo = row["PhoneNo"].ToString(),
                    };

            studentlist.Add(entstudentInfo);
        }
        data = studentlist.ToArray();
    }
    void definitions(string propertyName, object column)
    {
        if (propertyName == "Tags")
        {
            var tagCol = ((Column<string[]>)column);

            tagCol.CellRender = cellData =>
    @<span>
        @foreach (var tag in cellData.FieldValue)
        {
            var color = tag.Length > 5 ? "geekblue" : "green";
            if (tag == "loser")
            {
                color = "volcano";
            }
            <Tag Color="@color">@tag</Tag>
        }
    </span>
    ;

            return;
        }

        // You can use the `SetValue` extension method to set parameters for columns.
        column.SetValue("Sortable", true);
        column.SetValue("Filterable", true);
       
    }

}
