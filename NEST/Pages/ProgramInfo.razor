@page "/programinfo"



<section class=" container">



    <EditForm Model="DegreeInfo" OnSubmit="SaveDegreeInfo">
        <div class="mb-3">
            <table>
                <tr>


                    <td>
                        <label for="CityCode" class="form-label">Program</label>
                        <InputText class="form-control" @bind-Value="DegreeInfo.Program" required />
                    </td>


                    <td>
                        <label for="CityCode" class="form-label">Program Duration (Semester)</label>
                        <InputText class="form-control" @bind-Value="DegreeInfo.ProgramDuration" required />
                    </td>


                    <td>
                        <label for="CityCode" class="form-label">Discipline</label>
                        <InputText class="form-control" @bind-Value="DegreeInfo.Discipline" required />
                    </td>

                    <td>
                        <button type="submit" class="btn btn-primary mt-4">Save</button>
                    </td>
                </tr>
            </table>
        </div>
    </EditForm>

</section>


<div class=" table-responsive">

    <Table TItem="EntDegreeProgramInfo" DataSource="@data">

        <GenerateColumns Range="1.." Definitions=definitions />

        <ActionColumn Title="Action">
            <Space Size=@("middle")>

                <SpaceItem>
                    
                        <Button Danger @onclick="(()=>deleteProgram(context.ProgramId))">Delete</Button>
                    
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</div>

@code {


    EntDegreeProgramInfo[] data = new EntDegreeProgramInfo[] { };
    List<EntDegreeProgramInfo> degrees = new List<EntDegreeProgramInfo>();

    protected override async Task OnInitializedAsync()
    {
        dt = await DALCRUD.ReadTable("SP_GetDegreeInfo");
        ConvertDataIntoArray();

    }
    private void ConvertDataIntoArray()
    {
        foreach (DataRow row in dt.Rows)
        {
            EntDegreeProgramInfo employee = new EntDegreeProgramInfo
                    {
                        ProgramId = row["pk_ProgramId"].ToString(),
                        Program = row["Program"].ToString(),
                        ProgramDuration = row["ProgramDuration"].ToString(),

                        Discipline = row["Discipline"].ToString(),


                    };

            degrees.Add(employee);
        }
        data = degrees.ToArray();
    }

    void definitions(string propertyName, object column)
    {
       
        if (propertyName == "Tags")
        {
            var tagCol = ((Column<string[]>)column);

            tagCol.CellRender = cellData =>
    @<span>
        @foreach (var tag in cellData.FieldValue)
        {
            var color = tag.Length > 5 ? "geekblue" : "green";
            if (tag == "loser")
            {
                color = "volcano";
            }
            <Tag Color="@color">@tag</Tag>
        }
            </span>
    ;

            return;
        }

        // You can use the `SetValue` extension method to set parameters for columns.
        column.SetValue("Sortable", true);
        column.SetValue("Filterable", true);
    }

    protected EntDegreeProgramInfo? DegreeInfo { get; set; } = new EntDegreeProgramInfo();
    protected List<EntDegreeProgramInfo>? DegreeList;

    DataTable dt = new DataTable();
    protected async Task SaveDegreeInfo()
    {
        SqlParameter[] sp =
        {

            new SqlParameter("Program",DegreeInfo.Program),
            new SqlParameter("ProgramDuration",DegreeInfo.ProgramDuration),
            new SqlParameter("Discipline",DegreeInfo.Discipline)

    };
        await DALCRUD.CRUD("SP_SaveProgramInfo", sp);
        nm.NavigateTo("/programinfo", forceLoad: true);

    }
    private void deleteProgram(string id)
    {
        SqlParameter[] sp =
        {

            new SqlParameter("@pk_ProgramId",id),
    };
        DALCRUD.CRUD("SP_deleteProgram", sp);
        nm.NavigateTo("/programinfo",forceLoad:true);
    }

}